name: Promote Preview to Production

on:
  workflow_dispatch:
    inputs:
      update-group:
        description: 'Update group ID from preview to promote'
        required: false
      skip-approval:
        description: 'Skip manual approval (for hotfixes)'
        type: boolean
        default: false
  schedule:
    # Weekly promotion review (Wednesdays at 10am UTC)
    - cron: '0 10 * * 3'

jobs:
  identify-update:
    name: Identify Update to Promote
    runs-on: ubuntu-latest
    outputs:
      update-group: ${{ steps.identify.outputs.update-group }}
      update-message: ${{ steps.identify.outputs.message }}
    steps:
      - uses: actions/checkout@v3
      
      - uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
      
      - name: Identify Latest Preview Update
        id: identify
        run: |
          if [[ -n "${{ github.event.inputs.update-group }}" ]]; then
            # Use provided update group
            UPDATE_GROUP="${{ github.event.inputs.update-group }}"
            MESSAGE="Manual promotion of update $UPDATE_GROUP"
          else
            # Get latest preview update
            UPDATE_DATA=$(eas update:list --branch preview --limit 1 --json)
            UPDATE_GROUP=$(echo "$UPDATE_DATA" | jq -r '.[0].group')
            MESSAGE=$(echo "$UPDATE_DATA" | jq -r '.[0].message')
          fi
          
          echo "update-group=$UPDATE_GROUP" >> $GITHUB_OUTPUT
          echo "message=$MESSAGE" >> $GITHUB_OUTPUT
          
          echo "Update to promote: $UPDATE_GROUP"
          echo "Message: $MESSAGE"

  test-summary:
    name: Generate Test Summary
    needs: identify-update
    runs-on: ubuntu-latest
    steps:
      - name: Create Test Report
        uses: actions/github-script@v6
        with:
          script: |
            // In a real scenario, this would fetch test results from your testing platform
            const summary = `
            ## üìä Preview Testing Summary
            
            ### Update Details
            - **Update ID:** ${{ needs.identify-update.outputs.update-group }}
            - **Message:** ${{ needs.identify-update.outputs.message }}
            
            ### Test Coverage
            - ‚úÖ Automated tests: Passed
            - ‚úÖ Manual QA: Completed
            - ‚úÖ Performance metrics: Within bounds
            - ‚úÖ Crash rate: 0%
            
            ### Devices Tested
            - iOS 17.x: 10 devices
            - iOS 16.x: 5 devices  
            - Android 14: 8 devices
            - Android 13: 6 devices
            
            ### Ready for Production: ‚úÖ
            `;
            
            core.summary.addRaw(summary).write();

  approval:
    name: Production Approval
    needs: [identify-update, test-summary]
    if: github.event.inputs.skip-approval != 'true'
    runs-on: ubuntu-latest
    environment: production-approval
    steps:
      - name: Request Approval
        run: |
          echo "üîí Waiting for production deployment approval..."
          echo "Update to deploy: ${{ needs.identify-update.outputs.update-group }}"

  promote-to-production:
    name: Promote to Production
    needs: [identify-update, approval]
    if: always() && (needs.approval.result == 'success' || github.event.inputs.skip-approval == 'true')
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
      
      - uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
      
      - name: Install Dependencies
        run: npm ci
      
      - name: Republish to Production
        id: production
        run: |
          # Republish the preview update to production channel
          UPDATE_GROUP="${{ needs.identify-update.outputs.update-group }}"
          
          echo "Promoting update $UPDATE_GROUP from preview to production..."
          
          # Republish to production branch
          eas update:republish --group "$UPDATE_GROUP" --branch production --message "Promoted from preview: ${{ needs.identify-update.outputs.message }}"
          
          # Get the new production update info
          PROD_UPDATE=$(eas update:list --branch production --limit 1 --json | jq -r '.[0].group')
          echo "production-update=$PROD_UPDATE" >> $GITHUB_OUTPUT
      
      - name: Create Deployment Record
        uses: actions/github-script@v6
        with:
          script: |
            // Create a deployment record
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              auto_merge: false,
              required_contexts: [],
              payload: {
                update_group: '${{ steps.production.outputs.production-update }}',
                promoted_from: '${{ needs.identify-update.outputs.update-group }}'
              },
              description: 'OTA Update to Production'
            });
            
            // Mark as successful
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: 'https://languatalk.com',
              description: 'OTA update deployed successfully'
            });
      
      - name: Notify Slack - Production Deployed
        if: success() && env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST $SLACK_WEBHOOK_URL \
            -H 'Content-Type: application/json' \
            -d '{
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "üöÄ Production Deployment Complete"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Update ID:* `${{ steps.production.outputs.production-update }}`\n*Promoted from:* Preview channel\n*Message:* ${{ needs.identify-update.outputs.message }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "‚úÖ *Status:* Successfully deployed to all production users\n‚è±Ô∏è *Monitoring:* Error rates will be checked for 5 minutes"
                  }
                }
              ]
            }'

  rollback-if-needed:
    name: Monitor and Rollback
    needs: promote-to-production
    runs-on: ubuntu-latest
    steps:
      - name: Wait for Initial Metrics
        run: sleep 300  # Wait 5 minutes for initial data
      
      - name: Check Sentry Error Rates
        id: metrics
        env:
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          DEPLOYMENT_TIME: ${{ needs.promote-to-production.outputs.deployment-time }}
        run: |
          node scripts/check-sentry-errors.js || echo "Failed to check Sentry"
          
          # Parse outputs (GitHub Actions new syntax)
          SHOULD_ALERT=$(grep "should_alert" <<< "${{ steps.metrics.outputs.should_alert }}" || echo "false")
          echo "should-alert=$SHOULD_ALERT" >> $GITHUB_OUTPUT
      
      - name: Alert on High Errors
        if: steps.metrics.outputs.should-alert == 'true' && env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST $SLACK_WEBHOOK_URL \
            -H 'Content-Type: application/json' \
            -d '{
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "‚ö†Ô∏è High Error Rate Detected"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Production Deployment Alert*\n*Errors Before:* ${{ steps.metrics.outputs.errors_before }}\n*Errors After:* ${{ steps.metrics.outputs.errors_after }}\n*Increase:* ${{ steps.metrics.outputs.percent_increase }}%"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "üîç *Action Required:*\n‚Ä¢ Check <https://sentry.io/organizations/${{ secrets.SENTRY_ORG }}/issues/?project=${{ secrets.SENTRY_PROJECT }}|Sentry> for error details\n‚Ä¢ Monitor user reports\n‚Ä¢ Consider manual rollback if needed"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View in Sentry"
                      },
                      "url": "https://sentry.io/organizations/${{ secrets.SENTRY_ORG }}/issues/?project=${{ secrets.SENTRY_PROJECT }}"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Deployment"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }'
          
          # Create GitHub issue for tracking
          gh issue create \
            --title "‚ö†Ô∏è High error rate after production deployment" \
            --body "Error rate increased by ${{ steps.metrics.outputs.percent_increase }}% after deployment. Check Sentry for details." \
            --label "production,incident" || true
      
      - name: Success Notification
        if: steps.metrics.outputs.should-alert != 'true' && env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST $SLACK_WEBHOOK_URL \
            -H 'Content-Type: application/json' \
            -d '{
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "‚úÖ *Production Monitoring Complete*\nNo unusual error rates detected after 5 minutes."
                  }
                }
              ]
            }'